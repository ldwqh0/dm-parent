server:
  port: 8880
spring:  main:    allow-bean-definition-overriding: true
  datasource:
    url: '@datasource.url@'
    username: '@datasource.username@'
    driver-class-name: '@datasource.driver@'
    password: '@datasource.password@'
    hikari:
      connection-test-query: select 1
  jpa:
    show-sql: true ## 查询时是否显示Sql语句，在生成环境禁用
    generate-ddl: true ## 字符创建表结构
    database-platform: '@datasource.platform@'
    hibernate:
      use-new-id-generator-mappings: true
      ddl-auto: update  redis:    host: 127.0.0.1
    port: 6379
security:
  oauth2:
    client:      client-id: zuul
      client-secret: 123456
      access-token-uri: http://localhost:8887/oauth/token
      user-authorization-uri: http://localhost:8887/oauth/authorize
      client-authentication-scheme: form
      use-current-uri: false
      pre-established-redirect-uri: http://localhost/element-seed/login
    resource:      
      token-info-uri: 'http://127.0.0.1:8887/oauth/check_token'
#      user-info-uri: '@user.info.url@'     #    sso:
      ## 这个地址是sso校验auth_code的地址#      login-path: '/a/login'
logging: 
  level: 
    com.netflix: DEBUG
zuul:
  add-host-header: true
  ## 默认情况下，zuul 会将 authorization cookie set-cookie 这三个敏感的header不作为转发对象
  ## 在这里重新定义
  sensitive-headers: 
  - cookie
  - set-cookie  
  include-debug-header: true
  routes: 
    data: ## 数据中心的代理
      strip-prefix: true
      path: '/d/data/**'
      url: 'http://127.0.0.1:8081/'
    files: ## 文件服务器的代理
      strip-prefix: true
      path: '/d/files/**'
      url: 'http://127.0.0.1:8886/files'
    uap: ## 用户服务器的代理
      path: '/u/**'
      strip-prefix: true
      url: 'http://127.0.0.1:8887/'

    